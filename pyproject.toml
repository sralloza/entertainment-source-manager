[tool.poetry]
name = "entertainment-source-manager"
version = "1.2.0"
description = ""
authors = ["Diego Alloza Gonz√°lez <diego.allozagonzalez@telefonica.com>"]
readme = "README.md"
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.11"
httpx = "^0.23.3"
bs4 = "^0.0.1"
pydantic = "^1.10.5"
click = "^8.1.3"
python-dotenv = "^0.21.1"
toml = "^0.10.2"
aioboto3 = "^10.4.0"
python-json-logger = "^2.0.7"


[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
mypy = "^1.0.0"
pytest = "^7.2.2"
ruff = "^0.0.246"
pytest-httpx = "^0.21.3"
pytest-asyncio = "^0.20.3"
pytest-cov = "^4.0.0"
furl = "^2.1.3"
icecream = "^2.1.3"
freezegun = "^1.2.2"


[tool.poetry.group.types.dependencies]
types-pygments = "^2.14.0.2"
types-beautifulsoup4 = "^4.11.6.5"
types-python-dateutil = "^2.8.19.6"
types-toml = "^0.10.8.4"
types-aioboto3 = {extras = ["essential"], version = "^10.4.0"}
types-requests = "^2.28.11.15"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100

[tool.ruff]
line-length = 100
select = ["F", "E", "W", "I", "N", "ARG"]

[tool.ruff.isort]
known-first-party = ["app", "test"]

[tool.ruff.pep8-naming]
# Allow Pydantic's `@validator` and `@root_validator` decorators to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator", "pydantic.root_validator"]
